import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_hsvcolor_picker/flutter_hsvcolor_picker.dart';

class RGB extends StatefulWidget {
  const RGB({super.key});

  @override
  State<RGB> createState() => _RGBState();
}

class _RGBState extends State<RGB> {
  List<bool> isSelected = [false, true];
  HSVColor hsvColor = HSVColor.fromColor(Colors.white);
  double intensity = 1.0;

  void onColorChanged(HSVColor color) {
    setState(() {
      hsvColor = color;
      // Actualiza la intensidad en función de la opacidad del color
      intensity = color.toColor().opacity;
    });
  }

  void onIntensityChanged(double value) {
    setState(() {
      intensity = value;
      hsvColor = hsvColor.withAlpha(value);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: AssetImage('assets/img/galaxy.jpg'),
            fit: BoxFit.cover,
          ),
        ),
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.only(top: 80.0),
              child: ToggleButtons(
                borderRadius: BorderRadius.circular(8.0),
                selectedBorderColor: Colors.white,
                selectedColor: Colors.white,
                fillColor: const Color.fromARGB(0, 38, 37, 37),
                color: Colors.white,
                constraints: BoxConstraints(
                  minHeight: 60.0,
                  minWidth: 120.0,
                ),
                isSelected: isSelected,
                onPressed: _TogglePresionado,
                children: const [
                  Text(
                    'White',
                    style: TextStyle(
                      fontSize: 20.0,
                    ),
                  ),
                  Text(
                    'RGB',
                    style: TextStyle(fontSize: 20.0),
                  ),
                ],
              ),
            ),
            Expanded(
              child: Center(
                child: Padding(
                  padding: const EdgeInsets.all(10),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: <Widget>[
                      SizedBox(
                        width: 300,
                        height: 300,
                        child: WheelPicker(
                          color: hsvColor,
                          onChanged: (value) => onColorChanged(value),
                        ),
                      ),
                      SizedBox(height: 20),
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            vertical: 10.0, horizontal: 16.0),
                        child: SliderTheme(
                          data: SliderTheme.of(context).copyWith(
                            trackHeight: 30.0,
                            activeTrackColor: hsvColor.toColor(),
                            inactiveTrackColor:
                                hsvColor.toColor().withOpacity(0.5),
                            thumbColor: hsvColor.toColor(),
                            overlayColor: hsvColor.toColor().withOpacity(0.2),
                          ),
                          child: Slider(
                            value: intensity,
                            onChanged: (value) => onIntensityChanged(value),
                            min: 0.0,
                            max: 1.0,
                            divisions: 100,
                            label: "Intensidad: ${(intensity * 100).round()}%",
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: GestureDetector(
                onTap: _Apagado,
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                  ),
                  child: Icon(Icons.power_settings_new,
                      size: 36.0, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  //Método para cambiar a RGB o WHITE
  void _TogglePresionado(int index) {
    setState(() {
      for (int i = 0; i < isSelected.length; i++) {
        isSelected[i] = i == index;
      }
    });

    if (index == 0) {
      Navigator.pushNamed(context, 'white');
    } else if (index == 1) {
      Navigator.pushNamed(context, 'rgb');
    }
  }

  //método para prender apagar led
  void _Apagado() {
    Navigator.pushNamed(context, 'apagado');
  }
}

extension on HSVColor {
  HSVColor withAlpha(double alpha) {
    return HSVColor.fromAHSV(alpha, this.hue, this.saturation, this.value);
  }
}
